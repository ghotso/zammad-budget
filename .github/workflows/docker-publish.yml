name: Docker Build and Publish

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_tag:
        description: 'Custom tag for the Docker image'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      security-events: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create scan results directory
        run: mkdir -p scan-results

      # Build test image with GitHub cache
      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: local-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production
            VITE_APP_VERSION=${{ github.ref_name }}
            BUILD_TIMESTAMP=${{ github.event.repository.updated_at }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'local-test:latest'
          format: 'sarif'
          output: 'scan-results/trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'scan-results/trivy-results.sarif'
          category: 'trivy'

  publish:
    needs: build-and-test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Generate Docker tags
        id: meta
        run: |
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
          fi
          
          if [[ -n "${{ github.event.inputs.build_tag }}" ]]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.build_tag }}"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Zammad Budget Manager
            org.opencontainers.image.description=Track and manage time budgets for Zammad organizations
            org.opencontainers.image.vendor=ghotso
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.licenses=MIT
            com.github.repo=ghotso/zammad-budget
            com.github.sha=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            VITE_APP_VERSION=${{ github.ref_name }}
            BUILD_TIMESTAMP=${{ github.event.repository.updated_at }}

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          IFS=',' read -ra ADDR <<< "${{ steps.meta.outputs.tags }}"
          for i in "${ADDR[@]}"; do
            cosign sign --yes "$i"
          done

  notify:
    needs: [build-and-test, publish]
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - name: Update status badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        continue-on-error: true
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: zammad-budget-build.json
          label: build
          message: ${{ needs.publish.result == 'success' && 'passing' || 'failing' }}
          color: ${{ needs.publish.result == 'success' && 'success' || 'critical' }}